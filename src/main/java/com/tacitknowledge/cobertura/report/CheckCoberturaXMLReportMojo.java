package com.tacitknowledge.cobertura.report;

/*
 * Copyright 20.00.01-20.00.05 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

/**
 * Goal which reads and evaluates a cobertura xml file, dtd version 4 Created to support halting on failures for
 * coverage.xml generated by Testacular, which does not have a .ser
 *
 * @goal check
 */
public class CheckCoberturaXMLReportMojo
    extends AbstractMojo
{
    /**
     * Location of the file.
     * @parameter
     */
    private File inputFile;
    /**
     * @parameter
     */
    private List<PackageConfig> packageConfigs;
    /**
     * @parameter
     */
    private Double minBranch = 0.0;
    /**
     * @parameter
     */
    private Double minLine = 0.0;
    /**
     * @parameter
     */
    private Double minTotalBranch = 0.0;
    /**
     * @parameter
     */
    private Double minTotalLine = 0.0;
    /**
     * @parameter
     */
    private Boolean haltOnFailure = Boolean.TRUE;

    public void execute()
        throws MojoExecutionException
    {
        CheckReport checkReport = new CheckReport();
        if (!inputFile.exists())
        {
            getLog().error(inputFile.getAbsolutePath() + "not found");
        }
        checkReport.setXMLDataFile(inputFile);
        checkReport.setMinimumGlobalBranchRatePerPackage(minBranch);
        checkReport.setMinimumGlobalLineRatePerPackage(minLine);
        checkReport.setMinimumTotalBranchRate(minTotalBranch);
        checkReport.setMinimumTotalLineRate(minTotalLine);
        if ( packageConfigs != null )
        {
            for ( PackageConfig packageConfig : packageConfigs )
            {
                checkReport.addPackageConfig(packageConfig);
            }
        }

        java.util.Collection<CoverageResult> results = checkReport.execute();
        if ( !results.isEmpty() )
        {
            getLog().error("These packages failed to meet unit test coverage requirements.");
            for ( CoverageResult result : results )
            {
                getLog().error("\t" + result.getPackageName());
            }
            if ( haltOnFailure )
            {
                throw new MojoExecutionException("Unit test coverage failed!!");
            }
        }
        else
        {
            getLog().info("No coverage failures detected.");
        }
    }
}
